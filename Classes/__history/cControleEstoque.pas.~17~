unit cControleEstoque;

interface
uses classes, controls, SysUtils,ExtCtrls, Dialogs, ZAbstractConnection, ZConnection,
ZAbstractRODataset, ZAbstractDataset, ZDataset,DB, DBClient;

Type
   TControleEstoque = class
   private
    ConexaoDB:TZConnection;
    F_ProdutoId:Integer;
    F_Quantidade:Double;
   public
    constructor Create(aConexao: TZConnection);
    destructor Destroy; override;
    function BaixarEstoque:Boolean;
    function RetornarEstoque: Boolean;

   published
    property produtoId:integer  read F_ProdutoId  write F_ProdutoId;
    property Quantidade:Double read F_Quantidade write F_Quantidade;

   end;

implementation

{ TVenda }


{$Region 'Métodos Construtores e desconstrutores'}
constructor TControleEstoque.Create(aConexao: TZConnection);
begin
 aConexao :=  ConexaoDB

end;

destructor TControleEstoque.Destroy;
begin
   inherited;
end;

{$endRegion}

function TControleEstoque.BaixarEstoque: Boolean;
var Qry:TZQuery;
begin
 try
  Result:=true;
  Qry:=TZQuery.Create(nil);
  Qry.Connection:=ConexaoDB;
  Qry.SQL.Clear;
  Qry.SQL.Add(' UPDATE produtos '+
              ' SET  quantidade = quantidade - :qtdeBaixa '+
              ' WHERE produtoId =:produtoId');
  Qry.ParamByName('produtoId').AsInteger :=ProdutoId;
  Qry.ParamByName('qtdeBaixa').AsFloat   :=Quantidade;

   try
     Qry.ExecSQL;
   Except
      Result:=false;
   end;

 finally
    if Assigned(Qry) then
    FreeAndNil(Qry)
 end


end;

function TControleEstoque.RetornarEstoque: Boolean;
var Qry:TZQuery;
begin
 try
  Result:=true;
  Qry:=TZQuery.Create(nil);
  Qry.Connection:=ConexaoDB;
  Qry.SQL.Clear;
  Qry.SQL.Add(' UPDATE produtos '+
              ' SET  quantidade = quantidade + :qtdeBaixa '+
              ' WHERE produtoId =:produtoId');
  Qry.ParamByName('produtoId').AsInteger :=ProdutoId;
  Qry.ParamByName('qtdeBaixa').AsFloat   :=Quantidade;

   try
     Qry.ExecSQL;
   Except
      Result:=false;
   end;

 finally
    if Assigned(Qry) then
    FreeAndNil(Qry)
 end;
end;

end.
